local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local Lighting = game:GetService("Lighting")
local player = Players.LocalPlayer
local screenGui = Instance.new("ScreenGui")
screenGui.IgnoreGuiInset = true
screenGui.ResetOnSpawn = false
screenGui.DisplayOrder = 999
screenGui.Parent = player:WaitForChild("PlayerGui")
-- BlurEffect
local blur = Instance.new("BlurEffect")
blur.Size = 0
blur.Parent = Lighting
-- Background
local background = Instance.new("Frame")
background.Size = UDim2.new(1, 0, 1, 0)
background.Position = UDim2.new(0, 0, 0, 0)
background.BackgroundColor3 = Color3.fromRGB(15, 15, 15)
background.BackgroundTransparency = 1
background.Parent = screenGui
-- Logo
local logo = Instance.new("ImageLabel")
logo.Size = UDim2.new(0, 700, 0, 700)
logo.AnchorPoint = Vector2.new(0.5, 0.5)
logo.Position = UDim2.new(0.5, 0, 0.45, 0)
logo.BackgroundTransparency = 1
logo.Image = "rbxassetid://116290238711286"
logo.ImageTransparency = 1
logo.Parent = background
logo.ScaleType = Enum.ScaleType.Fit
-- Motto
local motto = Instance.new("TextLabel")
motto.Size = UDim2.new(0, 800, 0, 70)
motto.AnchorPoint = Vector2.new(0.5, 0)
motto.Position = UDim2.new(0.5, 0, 0.8, 0)
motto.BackgroundTransparency = 1
motto.Text = "Making millions of possibilities"
motto.Font = Enum.Font.SciFi
motto.TextScaled = true
motto.TextColor3 = Color3.fromRGB(255, 255, 255)
motto.TextTransparency = 1
motto.TextStrokeTransparency = 0.8
motto.Parent = background

local function tween(instance, properties, duration, style, direction)
	return TweenService:Create(instance, TweenInfo.new(duration, style or Enum.EasingStyle.Quad, direction or Enum.EasingDirection.Out), properties)
end
local function cinematicFlicker(instance, times, maxTransparency, maxShake, maxScaleOffset)
	for i = 1, times do
		local t = math.random() * maxTransparency
		if instance:IsA("TextLabel") then
			instance.TextTransparency = t
		else
			instance.ImageTransparency = t
		end
		local offsetX = (math.random() - 0.5) * maxShake
		local offsetY = (math.random() - 0.5) * maxShake
		instance.Position = UDim2.new(0.5, offsetX, instance.Position.Y.Scale, instance.Position.Y.Offset + offsetY)
		local scaleOffset = (math.random() - 0.5) * maxScaleOffset
		local baseSize = UDim2.new(0, 700, 0, 700)
		if instance:IsA("TextLabel") then
			baseSize = UDim2.new(0, 800, 0, 70)
		end
		instance.Size = UDim2.new(baseSize.X.Scale, baseSize.X.Offset + scaleOffset, baseSize.Y.Scale, baseSize.Y.Offset + scaleOffset)

		wait(0.05)
	end
	instance.Position = UDim2.new(0.5, 0, instance.Position.Y.Scale, instance.Position.Y.Offset)
	if instance:IsA("ImageLabel") then
		instance.Size = UDim2.new(0, 700, 0, 700)
	else
		instance.Size = UDim2.new(0, 800, 0, 70)
	end
end
cinematicFlicker(logo, 20, 0.8, 20, 30)
cinematicFlicker(motto, 20, 0.8, 10, 20)

local fadeInBg = tween(background, {BackgroundTransparency = 0}, 1)
local fadeInBlur = tween(blur, {Size = 20}, 1)
local fadeInLogo = tween(logo, {ImageTransparency = 0, Size = UDim2.new(0, 800, 0, 800)}, 1.2, Enum.EasingStyle.Back, Enum.EasingDirection.Out)
local fadeInMotto = tween(motto, {TextTransparency = 0}, 1.5, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)

local fadeOutLogo = tween(logo, {ImageTransparency = 1, Size = UDim2.new(0, 700, 0, 700)}, 1)
local fadeOutMotto = tween(motto, {TextTransparency = 1}, 1)
local fadeOutBg = tween(background, {BackgroundTransparency = 1}, 1)
local fadeOutBlur = tween(blur, {Size = 0}, 1)
fadeInBg:Play()
fadeInBlur:Play()
fadeInLogo:Play()
fadeInMotto:Play()
fadeInLogo.Completed:Wait()
task.wait(2)
fadeOutLogo:Play()
fadeOutMotto:Play()
fadeOutBg:Play()
fadeOutBlur:Play()
fadeOutBg.Completed:Wait()
-- Cleanup
screenGui:Destroy()
blur:Destroy()
